   1. add influx data points
   5. schema for allowedinstancetypes should ensure overwrites.instancetype exists
  12. pricing history should use the nextToken if present to
  13. store requests and instance data independently from AWS so that we don't have issues
      with the eventual consistency system.  This will also let us track when
      a spot request is rejected
  17. provide metrics on how long it takes for spot request to be filled, etc
  25. overwrite userdata with temporary taskcluster credentials as base64 encoded json
  28. pulse msg for taskPending, has provisioner id in it.  could use to maintain
      state of pending jobs
  35. Look at Rail's joi patch and figure out why things are breaking with it
  36. verify that errors dont bring down the whole process
  38. redo the excess unit killer
  39. when testing, alter the UserData instead of copying ami-id
  40. be able to encrypt UserData using opengpg.js

  TODO: Things in the server API

  29. do ami copy when machine is inserted or updated in the azure table storage
      http://aws.amazon.com/about-aws/whats-new/2013/03/12/announcing-ami-copy-for-amazon-ec2/
  36. add the following things:
        - api end point that lists all instances and spot requests in all regions
        - api end point that shuts off all instances managed by this provisioner
        - api end point to kill all instances of a specific type
        - api end point to show capacity, etc for each workerType

  TODO: Other
  30. add influx timing to the multiaws
  33. api endpoint when the machine comes up to tell us how long it took to turn on
