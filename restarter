#!/bin/bash

timeout=$1 ; shift
if [ -z "$timeout" ] ; then
  echo you must specify a timeout as the first arg
  exit 1
fi
cmd="$@"
if [ -z $1 ] ; then
  echo you must provide a command line to run
  exit 1
fi

while true ; do
  $cmd &
  pid=$!
  echo "started $cmd with pid $pid, sleeping $timeout seconds"
  sleep $timeout
  # Try to kill the process gracefully first
  kill -0 $pid &> /dev/null
  if [ $? -eq 0 ] ; then
    echo killing alive process with pid $pid
    kill $pid
    outcome=$?
  else
    echo process with pid $pid is not around to kill
    outcome=0
  fi
  if [ $outcome -ne 0 ] ; then
    # If clean kill doesn't happen we want to kill -9 the process after a
    # little break.  We only want to do the force kill if we know that the
    # reason for the failure on clean kill was something other than the process
    # already being gone
    echo "if pid $pid still exists we will kill -9 it"
    kill -0 $pid &> /dev/null && sleep 15 && kill -9 $pid
  fi
  # We wait on the pid which should be dead but mainly so that the output of
  # this program doesn't have "Terminated:   ...." messages interleaved with
  # its output
  wait $pid &> /dev/null
done


